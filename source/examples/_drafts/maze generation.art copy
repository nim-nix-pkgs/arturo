W: 14
H: 10

randomCover: function [xs][
    js: 0..dec size xs
    if js >= 0 [
        loop js..0 'i [
            j: random 0 i
            tmp: js\[i]
            js\[i]: js\[j]
            js\[j]: tmp
        ]
    ]
    return map js 'j -> xs\[j]
]


; import random, sequtils, strutils
; randomize()
 
; iterator randomCover[T](xs: openarray[T]): T =
;   var js = toSeq 0..xs.high
;   for i in countdown(js.high, 0):
;     let j = random(i)
;     swap(js[i], js[j])
;   for j in js:
;     yield xs[j]
 
; const
;   w = 14
;   h = 10

vis: new array.of: H+1 array.of: W+1 false
hor: new array.of: H+2 array.of: W+1 "+---"
ver: new array.of: H+1 (array.of: W+1 "|   ") ++ "|"

 
; var
;   vis = newSeqWith(h, newSeq[bool](w))
;   hor = newSeqWith(h+1, newSeqWith(w, "+---"))
;   ver = newSeqWith(h, newSeqWith(w, "|   ") & "|")
 
walk: function [x, y].exportable[
    print ["WALKING x:" x, "y:" y]
    vis\[y]\[x]: true
    loop randomCover @[@[x-1,y] @[x,y+1] @[x+1,y] @[x,y-1]] 'p [
        inspect p
        p0: p\0
        p1: p\1
        if or? [not? in? p0 0..W][not? in? p1 0..H] -> continue
        if vis\[p1]\[p0] -> continue
        ; if any? @[
        ;     [not? in? p0 0..W ]
        ;     [not? in? p1 0..H]
        ;     [vis\[p1]\[p0]]
        ; ] -> continue
        if p0=x -> hor\[max @[y p1]]\[x]: "+   "
        if p1=y -> ver\[y]\[max @[x p0]]: "    "
        walk p\0 p\1
    ]
]
; proc walk(x, y: int) =
;   vis[y][x] = true
;   for p in [[x-1,y], [x,y+1], [x+1,y], [x,y-1]].randomCover:
;     if p[0] notin 0 ..< w or p[1] notin 0 ..< h or vis[p[1]][p[0]]: continue
;     if p[0] == x: hor[max(y, p[1])][x] = "+   "
;     if p[1] == y: ver[y][max(x, p[0])] = "    "
;     walk p[0], p[1]
 
walk random 0 W random 0 H

inspect hor
inspect ver
loop combine hor ver++[""] [a,b][
    ;inspect a
    ;inspect b
    print a ++ @["+\n"] ++ b
]
; walk rand(0..<w), rand(0..<h)
; for a,b in zip(hor, ver & @[""]).items:
;   echo join(a & "+\n" & b)