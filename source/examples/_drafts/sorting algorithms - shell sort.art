; Procedure Shell_sort(Array A(1))
;   Protected l=ArraySize(A()), increment=Int(l/#STEP)
;   Protected i, j, temp
;   While increment
;     For i= increment To l
;       j=i
;       temp=A(i)
;       While j>=increment And A(j-increment)>temp
;         A(j)=A(j-increment)
;         j-increment
;       Wend
;       A(j)=temp
;     Next i
;     If increment=2
;       increment=1
;     Else
;       increment*(5.0/11)
;     EndIf
;   Wend
; EndProcedure

; SUBROUTINE Shell_Sort(a)
 
;   IMPLICIT NONE
;   INTEGER :: i, j, increment
;   REAL :: temp
;   REAL, INTENT(in out) :: a(:)
 
;   increment = SIZE(a) / 2
;   DO WHILE (increment > 0)
;       DO i = increment+1, SIZE(a)
;          j = i
;          temp = a(i)
;          DO WHILE (j >= increment+1 .AND. a(j-increment) > temp)
;             a(j) = a(j-increment)
;             j = j - increment
;          END DO
;          a(j) = temp
;       END DO
;       IF (increment == 2) THEN
;    	  increment = 1
;       ELSE
;          increment = increment * 5 / 11
;       END IF      
;   END DO
 
; END SUBROUTINE Shell_Sort

shellSort: function [items][
    arr: new items
    len: size arr
    ink: len/2
    while [ink > 0][
        loop (ink+1)..len-1 'i [
            print ["i:" i "ink:" ink]
            j: i
            temp: arr\[i]

            print ["j:" j "ink+1:" ink+1 "temp:" temp "arr\[j-ink]:" arr\[j-ink]]
            while [and? j >= ink+1
                        temp < arr\[j-ink]]
            [
                print ["while"]
                set arr j get arr j-ink
                j: j - ink
            ]
            set arr j temp
            if? ink=2 -> ink: 1
            else -> ink: (ink*5)/11
        ]
    ]
    return arr
]

print shellSort [3 1 2 8 5 7 9 4 6]