mulM: function [a,b][
    N: size a
    T: size b
    result: new array.of:N array.of:T 0
    loop 1..dec N 'i [
        loop 1..dec N 'j [
            loop 1..dec N 'k [
                result\[i]\[j]: result\[i]\[j] + a\[i]\[k] * b\[k]\[j]
            ]
        ]
    ]
    return result
]

identityM: function [N,T][
    new array.of:N array.of: T 1
]

expM: function [m, n][
    N: size m
    T: size first m
    if n=0 -> return identityM N T
    if n=1 -> return m
    nn: n
    mm: m
    result: identityM N T
    while [nn > 0][
        if not? zero? and nn 1 ->
            result: mulM result m
        nn: shr nn 1
        mm: mulM mm mm
    ]
    return result
]

; ; func `*`[N, T](a, b: Matrix[N, T]): Matrix[N, T] =
; ;   for i in 1..N:
; ;     for j in 1..N:
; ;       for k in 1..N:
; ;         result[i][j] += a[i][k] * b[k][j]
 
 
; ; func identityMatrix[N; T](): Matrix[N, T] =
; ;   for i in 1..N:
; ;     result[i][i] = T(1)
 
 
; func `^`[N, T](m: Matrix[N, T]; n: Natural): Matrix[N, T] =
;   if n == 0: return identityMatrix[N, T]()
;   if n == 1: return m
;   var n = n
;   var m = m
;   result = identityMatrix[N, T]()
;   while n > 0:
;     if (n and 1) != 0:
;       result = result * m
;     n = n shr 1
;     m = m * m

matrix: @[
    @[ 3, 2, neg 1],
    @[neg 1, 0,  5],
    @[ 2, neg 1, 3]
]

print expM matrix 10